#include "ClientDataHandler.h"

#include "nlohmann-json/json.hpp"
#include <limits>
#include <regex>
#include <iostream>
#include <fstream>
#include <utility>
#include <chrono>

// for convenience
using json = nlohmann::json;

namespace r7 {

ClientDataHandler::ClientDataHandler(const IoServerContext& ctx) :
    AbstractHandler(ctx)
{
}

bool ClientDataHandler::handleGet(CivetServer *server, struct mg_connection *conn)
{
    const struct mg_request_info *req_info = mg_get_request_info(conn);

//    if (!strcmp(req_info->request_method, "OPTIONS")) {
//        return false;
//    }

    //std::string fileName;
    //getFileNameFromPath(req_info, fileName);
    std::string fileName = getFileNameFromPath(req_info);

    if (fileName == "test") {
        return this->handGet_test(server, conn, req_info);
    }
    else {
        return this->handGet_json(server, conn, req_info, fileName);
    }
}

std::string ClientDataHandler::getFileNameFromPath(const struct mg_request_info* req_info) {

    std::string fileName;

    std::string valStr = std::string(req_info->request_uri);
    std::regex re(".*/data/(.*)");

    std::smatch match;

    if (std::regex_search(valStr, match, re) && match.size() > 0) {
        //fileName = match.str(1);
        fileName.append(match.str(1));
    }

    return fileName;
}

bool ClientDataHandler::handlePost(CivetServer *server, struct mg_connection *conn) {

    const struct mg_request_info *req_info = mg_get_request_info(conn);

    if (!strcmp(req_info->request_method, "OPTIONS")) {
        return false;
    }

    std::string baseFilename = getFileNameFromPath(req_info);

    std::fstream iFile(("data/" + baseFilename + ".json").c_str());
    bool fileExists = (bool)iFile;
    if (fileExists) {

        unsigned long now =
                std::chrono::system_clock::now().time_since_epoch() /
                std::chrono::milliseconds(1);

        // Create backup
        std::ofstream  dst("data/" + baseFilename + "-" + std::to_string(now) + ".bak.json", std::ios::binary);
        dst << iFile.rdbuf();
        dst.close();
    }

    iFile.close();

    json jsonResp;
    try {
        std::string reqBody;

        char* buf = new char[1024 * 1024 * 1];
        int bytesRead = mg_read(conn, buf, sizeof(buf));
        while (bytesRead > 0) {
            reqBody.append(buf, bytesRead);
            bytesRead = mg_read(conn, buf, sizeof(buf));
        }
        //if (reqBody.size() > 2) {
        //    reqBody.erase(1, 2);
        //}



        std::ofstream oFile(("data/" + baseFilename + ".json").c_str());
        //oFile.write(reqJson.dump(2).c_str(), reqBody.size());

        //json reqJson(reqBody);
        json reqJson = json::parse(reqBody);
        oFile << reqJson.dump(2);

        mg_printf(conn, "HTTP/1.1 201 OK\r\n"
                        "Access-Control-Allow-Origin: *\r\n"
                        "Content-Type: application/json\r\n\r\n");

        mg_printf(conn, reqJson.dump().c_str());

    }
    catch (json::parse_error &e)
    {
        mg_printf(conn, "HTTP/1.1 500 Internal Server Error\r\n"
                        "Access-Control-Allow-Origin: *\r\n"
                        "Content-Type: application/json\r\n\r\n");
        std::cerr << e.what() << std::endl;
        jsonResp["msg"] = e.what();
    }

    return true;
}

bool ClientDataHandler::handGet_json(CivetServer* server, struct mg_connection* conn, const struct mg_request_info* req_info, const std::string baseFilename) {

    std::ifstream iFile(("data/" + baseFilename + ".json").c_str());
    bool fileExists = (bool)iFile;
    if (!fileExists) {
        return false;
    }

    json jsonResp;
    try {

        //std::unique_ptr<json> jsonFile;
        //jsonFile = std::make_unique<json>(json());
        //iFile >> *jsonFile.get();
        iFile >> jsonResp;
        mg_printf(conn, "HTTP/1.1 200 OK\r\n"
                        "Access-Control-Allow-Origin: *\r\n"
                        "Content-Type: application/json\r\n\r\n");

    }
    catch (json::parse_error &e)
    {
        mg_printf(conn, "HTTP/1.1 500 Internal Server Error\r\n"
                        "Access-Control-Allow-Origin: *\r\n"
                        "Content-Type: application/json\r\n\r\n");
        std::cerr << e.what() << std::endl;
        jsonResp["msg"] = e.what();
    }
    
    mg_printf(conn, jsonResp.dump(2).c_str());
    return true;
}

bool ClientDataHandler::handGet_test(CivetServer* server, struct mg_connection* conn, const struct mg_request_info* req_info) {
    char valBuffer[255];
    int result = -1;
    if (req_info->query_string != NULL) {
        result = mg_get_var(req_info->query_string, strlen(req_info->query_string), "txt", valBuffer, sizeof(valBuffer));
    }

    mg_printf(conn, "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n");
    mg_printf(conn, "<html><body>");
    mg_printf(conn, "<h2>Test</h2>");


    // raw string literal
    auto j2 = R"(
              {
              "happy": true,
              "pi": 3.141
              }
              )"_json;
    json jsonFile;
    if (result != -1) {
        j2["request_uri"] = req_info->request_uri;
        j2["local_uri"] = req_info->local_uri;

        j2["txt"] = valBuffer; \
    }

    std::string out = j2.dump(2);

    mg_printf(conn, "<pre>");
    mg_printf(conn, out.c_str());
    mg_printf(conn, "</pre>");

    mg_printf(conn, "</body></html>\n");

    return true;
}

ClientDataHandler::~ClientDataHandler()
{
    //dtor
}
}
